#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrartcl
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "RetroShare: Developing Plugins"
\pdf_subject "retroshare, plugins"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
RetroShare: Writing Plugins
\end_layout

\begin_layout Author
RetroShare Team
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
There are 3 basic parts to a plugin: 4:55 PM drBob: 1) Serialiser - messages
 that you want to send over the network.
 4:56 PM drBob: 2) libretroshare service - send/recv msgs and prepare data
 for GUI.
 4:56 PM drBob: 3) rs-gui window - get info from service, and display it!
\end_layout

\begin_layout Plain Layout
electron: now i would like to make a plugin based on gxs.
 For this the Plugin needs access to the gxs id service.
 Is it the correct way to pass the idservice with the RsPluginInterfaces
 to the plugin? 4:57 PM drBob: haha, nice - but its not quite ready! We
 probably need to modify stuff to make gxsId service available, and the
 GxsCircle service available.
 4:58 PM drBob: what plugin where you thinking about? 4:59 PM electron:
 first a gxs-testing plugin and later someday a file sync plugin 5:03 PM
 Morpheus Being: And will think of a couple of suitable plugins - chess/gomoku
 like in psi+? 5:03 PM drBob: @electron, perhaps better to write them as
 normal services - compiled in.
 5:03 PM electron: about serielisers: do you write the serialisers by hand?
 because i don't like to write 100 lines of code, just to serialise a simple
 string.
 I have a idea of how to let the compiler write serialisers using templates.
 But i'm not sure if i missed something.
 5:04 PM drBob: we write the serialisers by hand.
 5:04 PM electron: drbob: yes i thought of this.
 5:05 PM Cyril: hi 5:05 PM electron: hi Cyril 5:05 PM drBob: when you find
 we need access to stuff, that isn't in the plugin manager - then we can
 add the access.
 5:05 PM Cyril: serialisers are not so tedious to write.
 5:05 PM drBob: (like gxsIds) 5:06 PM Cyril: Just copy what's done in existing
 serialisers.
 The most recent ones are in rsmsgitems.cc in v0.6-initdev branch.
 5:08 PM electron: i just feel like doing something wrong when copieng code
 5:08 PM drBob: haha.
 5:08 PM Cyril: just dont forget to update the items' IDs ï¿¼ 5:10 PM Cyril:
 we could do some fancy things, like classes that derive from an automatic
 serialisation base class.
 I've done that in my own projects for GUIs.
 You automatically get a gui entry for each member of a class.
 But it is not really needed for us now.
 5:13 PM electron: i was unhappy with writing serielisers by hand, and so
 i thought about something using templates.
 Then you just have to write a serialiser like this: serialise/deserialise_tool<
<var.
 It is harder to understand what is going on later, but it was fun to think
 about this 5:18 PM Lobby management: dasweiss-2 joined the lobby.
 5:29 PM Lobby management: Like has left the lobby.
 5:40 PM Lobby management: Stu Pid has left the lobby.
 6:01 PM Cyril: @electron: well, actually you cna do that.
 You just need in the constructor of your class to declare each member and
 what type it needs to be serialized with.
 It's anyway not an urgent thing to do, since we don't add new serialised
 classes everyday.
 It would be potentially useful for plugins anyway.
\end_layout

\begin_layout Plain Layout
5:14 PM Cyril: Basically there's multiple points: GUI part, and service
 part.
 The later is divided into 3 categories: (1) services based on friend communicat
ion, (2) services based on turtle router, (3) services based on cache exchange
 5:14 PM Cyril: the currency plugin is type (2) 
\end_layout

\begin_layout Plain Layout
5:15 PM Cyril: VOIP is type (1) 5:15 PM Cyril: LinksCloud is type (3) 5:16
 PM Cyril: Aout the alternate currency plugin, there's a simple version
 of it, called tortoise plugin, that only deadls with the tunnel-based communica
tion.
 Is that what you're talking about? I'd like to include that one in the
 sources, as a code example.
 5:19 PM Cyril: https://github.com/zeroreserve/tortoise 5:20 PM Morpheus
 Being: yep 5:20 PM Cyril: that's the one I'm talking about 5:20 PM Morpheus
 Being: ok 5:20 PM Cyril: ok 5:20 PM Morpheus Being: I haven't looked at
 it yet to start understanding it 5:20 PM Cyril: no need to go into the
 real bitcoin plugin.
 Too complicated for a plugin squeleton example 5:20 PM Morpheus Being:
 Does only of these services disappear with gxs 5:21 PM ASmith: EmptyPluginRS-ma
ster.zip
\end_layout

\begin_layout Plain Layout
5:21 PM Morpheus Being: I do any of these services disappear with gs 5:21
 PM Cyril: no.
 All the plugins will continue to work with GXS.
 5:21 PM Morpheus Being: gxs 5:21 PM Morpheus Being: Ahh that is good to
 know, thanks 5:22 PM Morpheus Being: fingers misbehaving 5:22 PM Morpheus
 Being: I have a bit of short circuit in nerves in neck 5:22 PM Cyril: only
 questions: LinksCloud will be using the old cache system.
 We'll replace it by the Posted service, which uses GXS and does at least
 the same thing 5:22 PM Morpheus Being: k 5:24 PM Lobby management: jenster
 joined the lobby.
 5:24 PM ASmith: FeedReader has optional Proxy support, why can't that be
 added to the main Retroshare Platform? 5:25 PM Morpheus Being: I haven't
 used links cloud a lot, but use feedreader a lot 5:26 PM Morpheus Being:
 will look at the code and differences over weekend 5:26 PM Morpheus Being:
 Have to go for a bit now, and feed/water animals, be back a bit later.
 
\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
So you have been using RetroShare for a while, and as a computer programmer,
 you want to add your favourite plugin to share with others.
\end_layout

\begin_layout Standard
Where to start?
\end_layout

\begin_layout Standard
Well, that is the purpose of this guide.
 It will provide a guide for developing it and getting it working with RetroShar
e with the least amount of effort possible.
\end_layout

\begin_layout Standard
This was written as a plugin was being developed, so the screen shots displayed
 are for that plugin.
\end_layout

\begin_layout Section
Concepts
\end_layout

\begin_layout Standard
There are 3 types of plugins:
\end_layout

\begin_layout Enumerate
services based on friend communication eg VoIP
\end_layout

\begin_layout Enumerate
services based on turtle router eg ZeroReserve
\end_layout

\begin_layout Enumerate
services based on cache exchange eg LinksCloud
\end_layout

\begin_layout Standard
There are 3 basic parts to each plugin:
\end_layout

\begin_layout Enumerate
Serialiser - messages that you want to send over the network.
 You just need in the constructor of your class to declare each member and
 what type it needs to be serialized with.
\end_layout

\begin_layout Enumerate
libretroshare service - send/recv msgs and prepare data for GUI.
 
\end_layout

\begin_layout Enumerate
rs-gui window - get info from service, and display it!
\end_layout

\begin_layout Standard
All plugins working in the 0.5.* version and releases, will continue to work
 with 0.6 which changes to a new system using GXS.
\end_layout

\begin_layout Section
Important Things
\end_layout

\begin_layout Subsection
Language
\end_layout

\begin_layout Standard
RetroShare is written in c++ with some parts in c.
 You need to have a good understanding of c++.
\end_layout

\begin_layout Subsection
Tools and Libraries
\end_layout

\begin_layout Subsubsection
QtCreator
\end_layout

\begin_layout Standard
QtCreator is a free tool that can be used to develop the project, as well
 as editing, and compiling to create a library as either a *.so for Gnu/Linux
 or *.dll for Windows or *.so for Mac.
 
\end_layout

\begin_layout Subsubsection
Editor
\end_layout

\begin_layout Standard
Many programmers use vim ( from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.vim.org/
\end_layout

\end_inset

 ) with some addons to make editing easier and faster, especially on older,
 slower computers.
 You can get a complete collection of plugins and settings for vim from
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/morpheusbeing/vim
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
Libraries
\end_layout

\begin_layout Standard
Unless your plugin is very complicated, all the required libraries should
 be available on your computer if you can compile a working version of RetroShar
e.
\end_layout

\begin_layout Subsubsection
Version Control
\begin_inset CommandInset label
LatexCommand label
name "sub:Version-Control"

\end_inset


\end_layout

\begin_layout Standard
RetroShare uses svn for its version control.
 If you are compiling your own, you will understand the use of the 
\emph on
svn up
\emph default
 command on Gnu/Linux
\begin_inset Note Note
status open

\begin_layout Plain Layout
How is it done on windows and mac? need to ask
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
For a project like this, git and 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com
\end_layout

\end_inset

 is a good option to manage a local and remote repository.
 
\end_layout

\begin_layout Standard
You will need to create an account if you don't have one, and create a repositor
y to store your code in.
 This allows you to keep an offsite copy of your work, as well as allowing
 for collaboration.
 There are many useful tutorials on using git, but essentially it is as
 follows:
\end_layout

\begin_layout Enumerate
Login or create an account at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Create a new repository (best to use the same name as your plugin name).
\end_layout

\begin_layout Enumerate
cd into the plugin folder you are working with
\end_layout

\begin_layout Enumerate
create a README.md file and edit the contents of it.
\end_layout

\begin_layout Enumerate
Initialise your local repository: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

git init
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Add the file you jsut created to your repository: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

git add README.md
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Commit the changes made into your repository:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

git commit -m first commit
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Map your repository to the remote repository using the command:
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout
\paragraph_spacing single
\noindent
\align left

git remote add origin https://github.com/[your user name]/[your plugin].git
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Now add any other files you have created.
 To add a folder, just use the folder name, and will track all the files.
\end_layout

\begin_layout Enumerate
Now copy your repository to the remote :
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout
\noindent
\align left

git push -u origin master
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Now check the status of local git:
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

git status
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more information about using git, check the internet for tutorials and
 information.
\end_layout

\begin_layout Subsection
Structure
\end_layout

\begin_layout Standard
It is possible to put all the files in one folder of the plugin name so
 that it is ~/retroshare/plugins[your plugin] as shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:folder structure"

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename folder_structure.png
	lyxscale 50
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Folder Structure For Plugin
\begin_inset CommandInset label
LatexCommand label
name "fig:folder structure"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As a suggestion, establish some folders in you plugin to store various parts
 of your project into (refer to 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:plugin subfolders"

\end_inset

)
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename project_subfolders.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sub-folders for the plugin (suggested)
\begin_inset CommandInset label
LatexCommand label
name "fig:plugin subfolders"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
You will notice a folder .git - this is for versioning control - refer to
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Version-Control"

\end_inset

.
\end_layout

\begin_layout Section
Putting It Together
\end_layout

\begin_layout Subsection
Serialiser
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
You just need in the constructor of your class to declare each member and
 what type it needs to be serialized with.
 It's anyway not an urgent thing to do, since we don't add new serialised
 classes everyday.
 It would be potentially useful for plugins anyway.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Documentation Processes
\end_layout

\begin_layout Standard
RetroShare uses doxygen to comment all of the code.
\end_layout

\begin_layout Standard
There are several different styles of doxygen coding that can be used.
\end_layout

\begin_layout Standard
The @ and 
\backslash
 are interchangeable.
\end_layout

\begin_layout Subsection
File Header 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * 
\backslash
file thing.ext 
\end_layout

\begin_layout Plain Layout

  * Description of the file 
\end_layout

\begin_layout Plain Layout

  * 
\end_layout

\begin_layout Plain Layout

  * 
\backslash
author Jake Smith 
\end_layout

\begin_layout Plain Layout

  * 
\backslash
version 1.0 
\end_layout

\begin_layout Plain Layout

  * 
\backslash
date 1999 
\end_layout

\begin_layout Plain Layout

  * 
\backslash
bug A known bug
\end_layout

\begin_layout Plain Layout

**/  
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Function
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * 
\backslash
brief Brief (one-line) description of function 
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * Extended description (may extend over several lines).
 
\end_layout

\begin_layout Plain Layout

  * 
\end_layout

\begin_layout Plain Layout

  * @code 
\end_layout

\begin_layout Plain Layout

  * NSString *example = @"example string!"; 
\end_layout

\begin_layout Plain Layout

  * @endcode 
\end_layout

\begin_layout Plain Layout

  * 
\end_layout

\begin_layout Plain Layout

  * We can also use lists.
 
\end_layout

\begin_layout Plain Layout

  * 
\end_layout

\begin_layout Plain Layout

  *   - item 1 
\end_layout

\begin_layout Plain Layout

  *   - item 2 
\end_layout

\begin_layout Plain Layout

  * 
\end_layout

\begin_layout Plain Layout

  * @param first Description of first param 
\end_layout

\begin_layout Plain Layout

  * @param second Description of second param 
\end_layout

\begin_layout Plain Layout

  * @return Description of returned value 
\end_layout

\begin_layout Plain Layout

  * @exception e Description of e 
\end_layout

\begin_layout Plain Layout

  * @warning Bad things can happen
\end_layout

\begin_layout Plain Layout

  * @todo Something to be done
\end_layout

\begin_layout Plain Layout

  * @note Using on your birthday will provide a bonus 
\end_layout

\begin_layout Plain Layout

  * @see [name-list]
\end_layout

\begin_layout Plain Layout

**/
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Class
\end_layout

\begin_layout Section*
Index
\end_layout

\end_body
\end_document
